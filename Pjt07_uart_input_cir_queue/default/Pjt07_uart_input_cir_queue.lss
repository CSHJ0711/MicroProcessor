
Pjt07_uart_input_cir_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800200  00000b4e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  0080023c  0080023c  00000c1e  2**0
                  ALLOC
  3 .stab         00000f48  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002d8  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00001e40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146b  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  0000348b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cdf  00000000  00000000  00003dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00004ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbe  00000000  00000000  0000517f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00005d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_25>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e4       	ldi	r30, 0x4E	; 78
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 33       	cpi	r26, 0x3C	; 60
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	ac e3       	ldi	r26, 0x3C	; 60
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	ab 3c       	cpi	r26, 0xCB	; 203
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 2a 02 	call	0x454	; 0x454 <main>
 124:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
char uart_busy;

void uart_init()
{
   stdout = &Mystdout;
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	92 e0       	ldi	r25, 0x02	; 2
 130:	90 93 c8 02 	sts	0x02C8, r25
 134:	80 93 c7 02 	sts	0x02C7, r24
   uart_busy = 0;
 138:	10 92 3c 02 	sts	0x023C, r1
   q_init();
 13c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <q_init>
   UBRR0H = 0x00; UBRR0L = 0x07; //115.2k
 140:	10 92 c5 00 	sts	0x00C5, r1
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	80 93 c4 00 	sts	0x00C4, r24
   sbi(UCSR0A, U2X0); //UCSR0A |= (1 << U2X0);
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
   sbi(UCSR0B, TXEN0); // TX enable
 154:	e1 ec       	ldi	r30, 0xC1	; 193
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
   sbi(UCSR0B, TXCIE0); //TX complete interrupt enable
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
   sbi(UCSR0B, RXEN0); //RX enable
 164:	80 81       	ld	r24, Z
 166:	80 61       	ori	r24, 0x10	; 16
 168:	80 83       	st	Z, r24
   sbi(UCSR0B, RXCIE0); // RX complete interrupt enable
 16a:	80 81       	ld	r24, Z
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 83       	st	Z, r24
}
 170:	08 95       	ret

00000172 <__vector_27>:
#include "ISR_TX.h"
#include "q.h"
#include "init.h"

ISR(USART0_TX_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
   char ch;

   if ((ch = qo_delete()) == 0)
 198:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <qo_delete>
 19c:	88 23       	and	r24, r24
 19e:	19 f4       	brne	.+6      	; 0x1a6 <__vector_27+0x34>
      uart_busy = 0;
 1a0:	10 92 3c 02 	sts	0x023C, r1
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__vector_27+0x38>
   else
      UDR0 = ch;
 1a6:	80 93 c6 00 	sts	0x00C6, r24
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <is_prime>:
#include <stdio.h>
#include "prime.h"

int is_prime(int n) {
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	fc 01       	movw	r30, r24
  int i;
  for ( i = 2; i <= n/2; i++)
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 1de:	eb 01       	movw	r28, r22
 1e0:	22 e0       	ldi	r18, 0x02	; 2
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <is_prime+0x26>
    if ((n % i) == 0) return(0); //FALSE
 1e6:	cf 01       	movw	r24, r30
 1e8:	b9 01       	movw	r22, r18
 1ea:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	41 f0       	breq	.+16     	; 0x202 <is_prime+0x32>
#include <stdio.h>
#include "prime.h"

int is_prime(int n) {
  int i;
  for ( i = 2; i <= n/2; i++)
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	c2 17       	cp	r28, r18
 1f8:	d3 07       	cpc	r29, r19
 1fa:	ac f7       	brge	.-22     	; 0x1e6 <is_prime+0x16>
    if ((n % i) == 0) return(0); //FALSE
  return(1); //true
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <is_prime+0x36>
#include "prime.h"

int is_prime(int n) {
  int i;
  for ( i = 2; i <= n/2; i++)
    if ((n % i) == 0) return(0); //FALSE
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
  return(1); //true
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <app_prime>:

void app_prime(int t)
{
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	7c 01       	movw	r14, r24
   int n, count = 0;
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	10 e0       	ldi	r17, 0x00	; 0
   for (n = 2; n <= t; n++) {
 222:	c2 e0       	ldi	r28, 0x02	; 2
 224:	d0 e0       	ldi	r29, 0x00	; 0
      if (is_prime(n)) {
	     count++;
		 printf("%d is a prime number !!!\n", n);
 226:	25 e1       	ldi	r18, 0x15	; 21
 228:	c2 2e       	mov	r12, r18
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	d2 2e       	mov	r13, r18
}

void app_prime(int t)
{
   int n, count = 0;
   for (n = 2; n <= t; n++) {
 22e:	16 c0       	rjmp	.+44     	; 0x25c <app_prime+0x50>
      if (is_prime(n)) {
 230:	ce 01       	movw	r24, r28
 232:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <is_prime>
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	81 f0       	breq	.+32     	; 0x25a <app_prime+0x4e>
	     count++;
 23a:	0f 5f       	subi	r16, 0xFF	; 255
 23c:	1f 4f       	sbci	r17, 0xFF	; 255
		 printf("%d is a prime number !!!\n", n);
 23e:	00 d0       	rcall	.+0      	; 0x240 <app_prime+0x34>
 240:	0f 92       	push	r0
 242:	ed b7       	in	r30, 0x3d	; 61
 244:	fe b7       	in	r31, 0x3e	; 62
 246:	d2 82       	std	Z+2, r13	; 0x02
 248:	c1 82       	std	Z+1, r12	; 0x01
 24a:	d4 83       	std	Z+4, r29	; 0x04
 24c:	c3 83       	std	Z+3, r28	; 0x03
 24e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
}

void app_prime(int t)
{
   int n, count = 0;
   for (n = 2; n <= t; n++) {
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	ec 16       	cp	r14, r28
 25e:	fd 06       	cpc	r15, r29
 260:	3c f7       	brge	.-50     	; 0x230 <app_prime+0x24>
      if (is_prime(n)) {
	     count++;
		 printf("%d is a prime number !!!\n", n);
      }
   }
   printf("count = %d\n",count);
 262:	00 d0       	rcall	.+0      	; 0x264 <app_prime+0x58>
 264:	0f 92       	push	r0
 266:	8f e2       	ldi	r24, 0x2F	; 47
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	ed b7       	in	r30, 0x3d	; 61
 26c:	fe b7       	in	r31, 0x3e	; 62
 26e:	92 83       	std	Z+2, r25	; 0x02
 270:	81 83       	std	Z+1, r24	; 0x01
 272:	14 83       	std	Z+4, r17	; 0x04
 274:	03 83       	std	Z+3, r16	; 0x03
 276:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	df 90       	pop	r13
 290:	cf 90       	pop	r12
 292:	08 95       	ret

00000294 <uart_putchar>:
#include "init.h"
#include "q.h"


int uart_putchar(char ch, FILE *stream)
{
 294:	cf 93       	push	r28
 296:	c8 2f       	mov	r28, r24
   if (ch == '\n')
 298:	8a 30       	cpi	r24, 0x0A	; 10
 29a:	19 f4       	brne	.+6      	; 0x2a2 <uart_putchar+0xe>
      uart_putchar('\r', stream);
 29c:	8d e0       	ldi	r24, 0x0D	; 13
 29e:	0e 94 4a 01 	call	0x294	; 0x294 <uart_putchar>
   cli();
 2a2:	f8 94       	cli
   if (!uart_busy) {
 2a4:	80 91 3c 02 	lds	r24, 0x023C
 2a8:	88 23       	and	r24, r24
 2aa:	89 f4       	brne	.+34     	; 0x2ce <uart_putchar+0x3a>
      UDR0 = ch;
 2ac:	c0 93 c6 00 	sts	0x00C6, r28
	  uart_busy = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 3c 02 	sts	0x023C, r24
 2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <uart_putchar+0x44>
   }
   else {
      while(qo_insert(ch) == 0) {
	     sei();
 2b8:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	9f e3       	ldi	r25, 0x3F	; 63
 2be:	a2 e0       	ldi	r26, 0x02	; 2
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	a0 40       	sbci	r26, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <uart_putchar+0x2c>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <uart_putchar+0x36>
 2ca:	00 00       	nop
		 _delay_ms(100);
		 cli();
 2cc:	f8 94       	cli
   if (!uart_busy) {
      UDR0 = ch;
	  uart_busy = 1;
   }
   else {
      while(qo_insert(ch) == 0) {
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 c1 01 	call	0x382	; 0x382 <qo_insert>
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	81 f3       	breq	.-32     	; 0x2b8 <uart_putchar+0x24>
	     sei();
		 _delay_ms(100);
		 cli();
      }
   }
   sei();
 2d8:	78 94       	sei
   return(1);
}
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
   fi = ri = fo = ro = 0;
 2e2:	10 92 82 02 	sts	0x0282, r1
 2e6:	10 92 81 02 	sts	0x0281, r1
 2ea:	10 92 80 02 	sts	0x0280, r1
 2ee:	10 92 7f 02 	sts	0x027F, r1
 2f2:	10 92 84 02 	sts	0x0284, r1
 2f6:	10 92 83 02 	sts	0x0283, r1
 2fa:	10 92 3e 02 	sts	0x023E, r1
 2fe:	10 92 3d 02 	sts	0x023D, r1
}
 302:	08 95       	ret

00000304 <qi_insert>:

int qi_insert(char ch)
{
 304:	48 2f       	mov	r20, r24
   if (( ri + 1) % QI_SIZE == fi)
 306:	20 91 83 02 	lds	r18, 0x0283
 30a:	30 91 84 02 	lds	r19, 0x0284
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	c9 01       	movw	r24, r18
 314:	60 e4       	ldi	r22, 0x40	; 64
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 31c:	9c 01       	movw	r18, r24
 31e:	80 91 3d 02 	lds	r24, 0x023D
 322:	90 91 3e 02 	lds	r25, 0x023E
 326:	28 17       	cp	r18, r24
 328:	39 07       	cpc	r19, r25
 32a:	59 f0       	breq	.+22     	; 0x342 <qi_insert+0x3e>
      return(0); //full
   ri = (ri + 1) % QI_SIZE;
 32c:	30 93 84 02 	sts	0x0284, r19
 330:	20 93 83 02 	sts	0x0283, r18
   qi[ri] = ch;
 334:	2b 57       	subi	r18, 0x7B	; 123
 336:	3d 4f       	sbci	r19, 0xFD	; 253
 338:	f9 01       	movw	r30, r18
 33a:	40 83       	st	Z, r20
   return(1);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	08 95       	ret
}

int qi_insert(char ch)
{
   if (( ri + 1) % QI_SIZE == fi)
      return(0); //full
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
   ri = (ri + 1) % QI_SIZE;
   qi[ri] = ch;
   return(1);
}
 346:	08 95       	ret

00000348 <qi_delete>:

int qi_delete()
{
   if ( ri == fi)
 348:	80 91 3d 02 	lds	r24, 0x023D
 34c:	90 91 3e 02 	lds	r25, 0x023E
 350:	20 91 83 02 	lds	r18, 0x0283
 354:	30 91 84 02 	lds	r19, 0x0284
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	79 f0       	breq	.+30     	; 0x37c <qi_delete+0x34>
      return(0); //empty
   fi = (fi + 1) % QI_SIZE;
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	60 e4       	ldi	r22, 0x40	; 64
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 368:	90 93 3e 02 	sts	0x023E, r25
 36c:	80 93 3d 02 	sts	0x023D, r24
   return(qi[fi]);
 370:	8b 57       	subi	r24, 0x7B	; 123
 372:	9d 4f       	sbci	r25, 0xFD	; 253
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	08 95       	ret
}

int qi_delete()
{
   if ( ri == fi)
      return(0); //empty
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
   fi = (fi + 1) % QI_SIZE;
   return(qi[fi]);
}
 380:	08 95       	ret

00000382 <qo_insert>:

int qo_insert(char ch)
{
 382:	48 2f       	mov	r20, r24
   if (( ro + 1) % QO_SIZE == fo)
 384:	20 91 81 02 	lds	r18, 0x0281
 388:	30 91 82 02 	lds	r19, 0x0282
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	c9 01       	movw	r24, r18
 392:	60 e4       	ldi	r22, 0x40	; 64
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 39a:	9c 01       	movw	r18, r24
 39c:	80 91 7f 02 	lds	r24, 0x027F
 3a0:	90 91 80 02 	lds	r25, 0x0280
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	59 f0       	breq	.+22     	; 0x3c0 <qo_insert+0x3e>
      return(0); //full
   ro = (ro + 1) % QO_SIZE;
 3aa:	30 93 82 02 	sts	0x0282, r19
 3ae:	20 93 81 02 	sts	0x0281, r18
   qo[ro] = ch;
 3b2:	21 5c       	subi	r18, 0xC1	; 193
 3b4:	3d 4f       	sbci	r19, 0xFD	; 253
 3b6:	f9 01       	movw	r30, r18
 3b8:	40 83       	st	Z, r20
   return(1);
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	08 95       	ret
}

int qo_insert(char ch)
{
   if (( ro + 1) % QO_SIZE == fo)
      return(0); //full
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
   ro = (ro + 1) % QO_SIZE;
   qo[ro] = ch;
   return(1);
}
 3c4:	08 95       	ret

000003c6 <qo_delete>:

int qo_delete()
{
   if ( ro == fo)
 3c6:	80 91 7f 02 	lds	r24, 0x027F
 3ca:	90 91 80 02 	lds	r25, 0x0280
 3ce:	20 91 81 02 	lds	r18, 0x0281
 3d2:	30 91 82 02 	lds	r19, 0x0282
 3d6:	28 17       	cp	r18, r24
 3d8:	39 07       	cpc	r19, r25
 3da:	79 f0       	breq	.+30     	; 0x3fa <qo_delete+0x34>
      return(0); //empty
   fo = (fo + 1) % QO_SIZE;
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	60 e4       	ldi	r22, 0x40	; 64
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 91 02 	call	0x522	; 0x522 <__divmodhi4>
 3e6:	90 93 80 02 	sts	0x0280, r25
 3ea:	80 93 7f 02 	sts	0x027F, r24
   return(qo[fo]);
 3ee:	81 5c       	subi	r24, 0xC1	; 193
 3f0:	9d 4f       	sbci	r25, 0xFD	; 253
 3f2:	fc 01       	movw	r30, r24
 3f4:	80 81       	ld	r24, Z
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	08 95       	ret
}

int qo_delete()
{
   if ( ro == fo)
      return(0); //empty
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
   fo = (fo + 1) % QO_SIZE;
   return(qo[fo]);
}
 3fe:	08 95       	ret

00000400 <__vector_25>:
#include <avr/interrupt.h>
#include "ISR_RX.h"
#include "q.h"

ISR(USART0_RX_vect)
{
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	0b b6       	in	r0, 0x3b	; 59
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
 40e:	2f 93       	push	r18
 410:	3f 93       	push	r19
 412:	4f 93       	push	r20
 414:	5f 93       	push	r21
 416:	6f 93       	push	r22
 418:	7f 93       	push	r23
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
 41e:	af 93       	push	r26
 420:	bf 93       	push	r27
 422:	ef 93       	push	r30
 424:	ff 93       	push	r31
   char ch;

   ch = UDR0;
 426:	80 91 c6 00 	lds	r24, 0x00C6
   qi_insert(ch);
 42a:	0e 94 82 01 	call	0x304	; 0x304 <qi_insert>
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	bf 91       	pop	r27
 434:	af 91       	pop	r26
 436:	9f 91       	pop	r25
 438:	8f 91       	pop	r24
 43a:	7f 91       	pop	r23
 43c:	6f 91       	pop	r22
 43e:	5f 91       	pop	r21
 440:	4f 91       	pop	r20
 442:	3f 91       	pop	r19
 444:	2f 91       	pop	r18
 446:	0f 90       	pop	r0
 448:	0b be       	out	0x3b, r0	; 59
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <main>:
#include "prime.h"
#include "putchar.h"
#include "q.h"

int main()
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
 45c:	c0 58       	subi	r28, 0x80	; 128
 45e:	d0 40       	sbci	r29, 0x00	; 0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], ch;
	int n = 0;
	uart_init();
 46a:	0e 94 96 00 	call	0x12c	; 0x12c <uart_init>
	sei();
 46e:	78 94       	sei
	printf("$ ");
 470:	0f 92       	push	r0
 472:	0f 92       	push	r0
 474:	8e e0       	ldi	r24, 0x0E	; 14
 476:	e8 2e       	mov	r14, r24
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	f8 2e       	mov	r15, r24
 47c:	ed b7       	in	r30, 0x3d	; 61
 47e:	fe b7       	in	r31, 0x3e	; 62
 480:	f2 82       	std	Z+2, r15	; 0x02
 482:	e1 82       	std	Z+1, r14	; 0x01
 484:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
#include "q.h"

int main()
{
	char cmd[128], ch;
	int n = 0;
 48c:	00 e0       	ldi	r16, 0x00	; 0
 48e:	10 e0       	ldi	r17, 0x00	; 0
						app_prime(atoi(&cmd[3]) * 100);
					}
				}
				}
				n = 0;
				printf("$ ");
 490:	de 2c       	mov	r13, r14
 492:	ef 2c       	mov	r14, r15
				if(num >= 1 && num<=10) {
				if(!strncmp(cmd,"app",3)) {
					if(cmd[3] == '\0') {
						app_prime(2000);
					} else {
						app_prime(atoi(&cmd[3]) * 100);
 494:	94 e6       	ldi	r25, 0x64	; 100
 496:	a9 2e       	mov	r10, r25
 498:	b1 2c       	mov	r11, r1
	int n = 0;
	uart_init();
	sei();
	printf("$ ");
	while(1) {
		cli();
 49a:	f8 94       	cli
		ch = qi_delete();
 49c:	0e 94 a4 01 	call	0x348	; 0x348 <qi_delete>
		sei();
 4a0:	78 94       	sei
		if(ch) { 
 4a2:	88 23       	and	r24, r24
 4a4:	d1 f3       	breq	.-12     	; 0x49a <main+0x46>
			if(ch == '\r') {
		//	if(ch == '\n') {
				cmd[n] = 0;
 4a6:	e1 e0       	ldi	r30, 0x01	; 1
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	ec 0f       	add	r30, r28
 4ac:	fd 1f       	adc	r31, r29
 4ae:	e0 0f       	add	r30, r16
 4b0:	f1 1f       	adc	r31, r17
	while(1) {
		cli();
		ch = qi_delete();
		sei();
		if(ch) { 
			if(ch == '\r') {
 4b2:	8d 30       	cpi	r24, 0x0D	; 13
 4b4:	91 f5       	brne	.+100    	; 0x51a <main+0xc6>
		//	if(ch == '\n') {
				cmd[n] = 0;
 4b6:	10 82       	st	Z, r1
				int num = cmd[3] - '0';
 4b8:	0c 81       	ldd	r16, Y+4	; 0x04
 4ba:	80 2f       	mov	r24, r16
 4bc:	90 e0       	ldi	r25, 0x00	; 0
				if(num >= 1 && num<=10) {
 4be:	c1 97       	sbiw	r24, 0x31	; 49
 4c0:	8a 30       	cpi	r24, 0x0A	; 10
 4c2:	91 05       	cpc	r25, r1
 4c4:	e8 f4       	brcc	.+58     	; 0x500 <main+0xac>
				if(!strncmp(cmd,"app",3)) {
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	61 e1       	ldi	r22, 0x11	; 17
 4cc:	72 e0       	ldi	r23, 0x02	; 2
 4ce:	43 e0       	ldi	r20, 0x03	; 3
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <strncmp>
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	99 f4       	brne	.+38     	; 0x500 <main+0xac>
					if(cmd[3] == '\0') {
 4da:	00 23       	and	r16, r16
 4dc:	19 f4       	brne	.+6      	; 0x4e4 <main+0x90>
						app_prime(2000);
 4de:	80 ed       	ldi	r24, 0xD0	; 208
 4e0:	97 e0       	ldi	r25, 0x07	; 7
 4e2:	0c c0       	rjmp	.+24     	; 0x4fc <main+0xa8>
					} else {
						app_prime(atoi(&cmd[3]) * 100);
 4e4:	ce 01       	movw	r24, r28
 4e6:	04 96       	adiw	r24, 0x04	; 4
 4e8:	0e 94 b8 02 	call	0x570	; 0x570 <atoi>
 4ec:	9c 01       	movw	r18, r24
 4ee:	2a 9d       	mul	r18, r10
 4f0:	c0 01       	movw	r24, r0
 4f2:	2b 9d       	mul	r18, r11
 4f4:	90 0d       	add	r25, r0
 4f6:	3a 9d       	mul	r19, r10
 4f8:	90 0d       	add	r25, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	0e 94 06 01 	call	0x20c	; 0x20c <app_prime>
					}
				}
				}
				n = 0;
				printf("$ ");
 500:	0f 92       	push	r0
 502:	0f 92       	push	r0
 504:	ed b7       	in	r30, 0x3d	; 61
 506:	fe b7       	in	r31, 0x3e	; 62
 508:	d1 82       	std	Z+1, r13	; 0x01
 50a:	e2 82       	std	Z+2, r14	; 0x02
 50c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <printf>
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
					} else {
						app_prime(atoi(&cmd[3]) * 100);
					}
				}
				}
				n = 0;
 514:	00 e0       	ldi	r16, 0x00	; 0
 516:	10 e0       	ldi	r17, 0x00	; 0
 518:	c0 cf       	rjmp	.-128    	; 0x49a <main+0x46>
				printf("$ ");
			}
			else 
				cmd[n++] = ch;
 51a:	80 83       	st	Z, r24
 51c:	0f 5f       	subi	r16, 0xFF	; 255
 51e:	1f 4f       	sbci	r17, 0xFF	; 255
 520:	bc cf       	rjmp	.-136    	; 0x49a <main+0x46>

00000522 <__divmodhi4>:
 522:	97 fb       	bst	r25, 7
 524:	09 2e       	mov	r0, r25
 526:	07 26       	eor	r0, r23
 528:	0a d0       	rcall	.+20     	; 0x53e <__divmodhi4_neg1>
 52a:	77 fd       	sbrc	r23, 7
 52c:	04 d0       	rcall	.+8      	; 0x536 <__divmodhi4_neg2>
 52e:	0c d0       	rcall	.+24     	; 0x548 <__udivmodhi4>
 530:	06 d0       	rcall	.+12     	; 0x53e <__divmodhi4_neg1>
 532:	00 20       	and	r0, r0
 534:	1a f4       	brpl	.+6      	; 0x53c <__divmodhi4_exit>

00000536 <__divmodhi4_neg2>:
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255

0000053c <__divmodhi4_exit>:
 53c:	08 95       	ret

0000053e <__divmodhi4_neg1>:
 53e:	f6 f7       	brtc	.-4      	; 0x53c <__divmodhi4_exit>
 540:	90 95       	com	r25
 542:	81 95       	neg	r24
 544:	9f 4f       	sbci	r25, 0xFF	; 255
 546:	08 95       	ret

00000548 <__udivmodhi4>:
 548:	aa 1b       	sub	r26, r26
 54a:	bb 1b       	sub	r27, r27
 54c:	51 e1       	ldi	r21, 0x11	; 17
 54e:	07 c0       	rjmp	.+14     	; 0x55e <__udivmodhi4_ep>

00000550 <__udivmodhi4_loop>:
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	a6 17       	cp	r26, r22
 556:	b7 07       	cpc	r27, r23
 558:	10 f0       	brcs	.+4      	; 0x55e <__udivmodhi4_ep>
 55a:	a6 1b       	sub	r26, r22
 55c:	b7 0b       	sbc	r27, r23

0000055e <__udivmodhi4_ep>:
 55e:	88 1f       	adc	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	5a 95       	dec	r21
 564:	a9 f7       	brne	.-22     	; 0x550 <__udivmodhi4_loop>
 566:	80 95       	com	r24
 568:	90 95       	com	r25
 56a:	bc 01       	movw	r22, r24
 56c:	cd 01       	movw	r24, r26
 56e:	08 95       	ret

00000570 <atoi>:
 570:	fc 01       	movw	r30, r24
 572:	88 27       	eor	r24, r24
 574:	99 27       	eor	r25, r25
 576:	e8 94       	clt
 578:	21 91       	ld	r18, Z+
 57a:	20 32       	cpi	r18, 0x20	; 32
 57c:	e9 f3       	breq	.-6      	; 0x578 <atoi+0x8>
 57e:	29 30       	cpi	r18, 0x09	; 9
 580:	10 f0       	brcs	.+4      	; 0x586 <atoi+0x16>
 582:	2e 30       	cpi	r18, 0x0E	; 14
 584:	c8 f3       	brcs	.-14     	; 0x578 <atoi+0x8>
 586:	2b 32       	cpi	r18, 0x2B	; 43
 588:	41 f0       	breq	.+16     	; 0x59a <atoi+0x2a>
 58a:	2d 32       	cpi	r18, 0x2D	; 45
 58c:	39 f4       	brne	.+14     	; 0x59c <atoi+0x2c>
 58e:	68 94       	set
 590:	04 c0       	rjmp	.+8      	; 0x59a <atoi+0x2a>
 592:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__mulhi_const_10>
 596:	82 0f       	add	r24, r18
 598:	91 1d       	adc	r25, r1
 59a:	21 91       	ld	r18, Z+
 59c:	20 53       	subi	r18, 0x30	; 48
 59e:	2a 30       	cpi	r18, 0x0A	; 10
 5a0:	c0 f3       	brcs	.-16     	; 0x592 <atoi+0x22>
 5a2:	1e f4       	brtc	.+6      	; 0x5aa <atoi+0x3a>
 5a4:	90 95       	com	r25
 5a6:	81 95       	neg	r24
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <strncmp>:
 5ac:	fb 01       	movw	r30, r22
 5ae:	dc 01       	movw	r26, r24
 5b0:	41 50       	subi	r20, 0x01	; 1
 5b2:	50 40       	sbci	r21, 0x00	; 0
 5b4:	30 f0       	brcs	.+12     	; 0x5c2 <strncmp+0x16>
 5b6:	8d 91       	ld	r24, X+
 5b8:	01 90       	ld	r0, Z+
 5ba:	80 19       	sub	r24, r0
 5bc:	19 f4       	brne	.+6      	; 0x5c4 <strncmp+0x18>
 5be:	00 20       	and	r0, r0
 5c0:	b9 f7       	brne	.-18     	; 0x5b0 <strncmp+0x4>
 5c2:	88 1b       	sub	r24, r24
 5c4:	99 0b       	sbc	r25, r25
 5c6:	08 95       	ret

000005c8 <__mulhi_const_10>:
 5c8:	7a e0       	ldi	r23, 0x0A	; 10
 5ca:	97 9f       	mul	r25, r23
 5cc:	90 2d       	mov	r25, r0
 5ce:	87 9f       	mul	r24, r23
 5d0:	80 2d       	mov	r24, r0
 5d2:	91 0d       	add	r25, r1
 5d4:	11 24       	eor	r1, r1
 5d6:	08 95       	ret

000005d8 <printf>:
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	fe 01       	movw	r30, r28
 5e2:	36 96       	adiw	r30, 0x06	; 6
 5e4:	61 91       	ld	r22, Z+
 5e6:	71 91       	ld	r23, Z+
 5e8:	80 91 c7 02 	lds	r24, 0x02C7
 5ec:	90 91 c8 02 	lds	r25, 0x02C8
 5f0:	af 01       	movw	r20, r30
 5f2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <vfprintf>
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <vfprintf>:
 5fc:	2f 92       	push	r2
 5fe:	3f 92       	push	r3
 600:	4f 92       	push	r4
 602:	5f 92       	push	r5
 604:	6f 92       	push	r6
 606:	7f 92       	push	r7
 608:	8f 92       	push	r8
 60a:	9f 92       	push	r9
 60c:	af 92       	push	r10
 60e:	bf 92       	push	r11
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	2d 97       	sbiw	r28, 0x0d	; 13
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	3c 01       	movw	r6, r24
 632:	7d 87       	std	Y+13, r23	; 0x0d
 634:	6c 87       	std	Y+12, r22	; 0x0c
 636:	5a 01       	movw	r10, r20
 638:	fc 01       	movw	r30, r24
 63a:	17 82       	std	Z+7, r1	; 0x07
 63c:	16 82       	std	Z+6, r1	; 0x06
 63e:	83 81       	ldd	r24, Z+3	; 0x03
 640:	81 ff       	sbrs	r24, 1
 642:	c8 c1       	rjmp	.+912    	; 0x9d4 <vfprintf+0x3d8>
 644:	2e 01       	movw	r4, r28
 646:	08 94       	sec
 648:	41 1c       	adc	r4, r1
 64a:	51 1c       	adc	r5, r1
 64c:	f3 01       	movw	r30, r6
 64e:	93 81       	ldd	r25, Z+3	; 0x03
 650:	ec 85       	ldd	r30, Y+12	; 0x0c
 652:	fd 85       	ldd	r31, Y+13	; 0x0d
 654:	93 fd       	sbrc	r25, 3
 656:	85 91       	lpm	r24, Z+
 658:	93 ff       	sbrs	r25, 3
 65a:	81 91       	ld	r24, Z+
 65c:	fd 87       	std	Y+13, r31	; 0x0d
 65e:	ec 87       	std	Y+12, r30	; 0x0c
 660:	88 23       	and	r24, r24
 662:	09 f4       	brne	.+2      	; 0x666 <vfprintf+0x6a>
 664:	b3 c1       	rjmp	.+870    	; 0x9cc <vfprintf+0x3d0>
 666:	85 32       	cpi	r24, 0x25	; 37
 668:	41 f4       	brne	.+16     	; 0x67a <vfprintf+0x7e>
 66a:	93 fd       	sbrc	r25, 3
 66c:	85 91       	lpm	r24, Z+
 66e:	93 ff       	sbrs	r25, 3
 670:	81 91       	ld	r24, Z+
 672:	fd 87       	std	Y+13, r31	; 0x0d
 674:	ec 87       	std	Y+12, r30	; 0x0c
 676:	85 32       	cpi	r24, 0x25	; 37
 678:	29 f4       	brne	.+10     	; 0x684 <vfprintf+0x88>
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	b3 01       	movw	r22, r6
 67e:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 682:	e4 cf       	rjmp	.-56     	; 0x64c <vfprintf+0x50>
 684:	ff 24       	eor	r15, r15
 686:	ee 24       	eor	r14, r14
 688:	10 e0       	ldi	r17, 0x00	; 0
 68a:	10 32       	cpi	r17, 0x20	; 32
 68c:	b0 f4       	brcc	.+44     	; 0x6ba <vfprintf+0xbe>
 68e:	8b 32       	cpi	r24, 0x2B	; 43
 690:	69 f0       	breq	.+26     	; 0x6ac <vfprintf+0xb0>
 692:	8c 32       	cpi	r24, 0x2C	; 44
 694:	28 f4       	brcc	.+10     	; 0x6a0 <vfprintf+0xa4>
 696:	80 32       	cpi	r24, 0x20	; 32
 698:	51 f0       	breq	.+20     	; 0x6ae <vfprintf+0xb2>
 69a:	83 32       	cpi	r24, 0x23	; 35
 69c:	71 f4       	brne	.+28     	; 0x6ba <vfprintf+0xbe>
 69e:	0b c0       	rjmp	.+22     	; 0x6b6 <vfprintf+0xba>
 6a0:	8d 32       	cpi	r24, 0x2D	; 45
 6a2:	39 f0       	breq	.+14     	; 0x6b2 <vfprintf+0xb6>
 6a4:	80 33       	cpi	r24, 0x30	; 48
 6a6:	49 f4       	brne	.+18     	; 0x6ba <vfprintf+0xbe>
 6a8:	11 60       	ori	r17, 0x01	; 1
 6aa:	2c c0       	rjmp	.+88     	; 0x704 <vfprintf+0x108>
 6ac:	12 60       	ori	r17, 0x02	; 2
 6ae:	14 60       	ori	r17, 0x04	; 4
 6b0:	29 c0       	rjmp	.+82     	; 0x704 <vfprintf+0x108>
 6b2:	18 60       	ori	r17, 0x08	; 8
 6b4:	27 c0       	rjmp	.+78     	; 0x704 <vfprintf+0x108>
 6b6:	10 61       	ori	r17, 0x10	; 16
 6b8:	25 c0       	rjmp	.+74     	; 0x704 <vfprintf+0x108>
 6ba:	17 fd       	sbrc	r17, 7
 6bc:	2e c0       	rjmp	.+92     	; 0x71a <vfprintf+0x11e>
 6be:	28 2f       	mov	r18, r24
 6c0:	20 53       	subi	r18, 0x30	; 48
 6c2:	2a 30       	cpi	r18, 0x0A	; 10
 6c4:	98 f4       	brcc	.+38     	; 0x6ec <vfprintf+0xf0>
 6c6:	16 ff       	sbrs	r17, 6
 6c8:	08 c0       	rjmp	.+16     	; 0x6da <vfprintf+0xde>
 6ca:	8f 2d       	mov	r24, r15
 6cc:	88 0f       	add	r24, r24
 6ce:	f8 2e       	mov	r15, r24
 6d0:	ff 0c       	add	r15, r15
 6d2:	ff 0c       	add	r15, r15
 6d4:	f8 0e       	add	r15, r24
 6d6:	f2 0e       	add	r15, r18
 6d8:	15 c0       	rjmp	.+42     	; 0x704 <vfprintf+0x108>
 6da:	8e 2d       	mov	r24, r14
 6dc:	88 0f       	add	r24, r24
 6de:	e8 2e       	mov	r14, r24
 6e0:	ee 0c       	add	r14, r14
 6e2:	ee 0c       	add	r14, r14
 6e4:	e8 0e       	add	r14, r24
 6e6:	e2 0e       	add	r14, r18
 6e8:	10 62       	ori	r17, 0x20	; 32
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <vfprintf+0x108>
 6ec:	8e 32       	cpi	r24, 0x2E	; 46
 6ee:	21 f4       	brne	.+8      	; 0x6f8 <vfprintf+0xfc>
 6f0:	16 fd       	sbrc	r17, 6
 6f2:	6c c1       	rjmp	.+728    	; 0x9cc <vfprintf+0x3d0>
 6f4:	10 64       	ori	r17, 0x40	; 64
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <vfprintf+0x108>
 6f8:	8c 36       	cpi	r24, 0x6C	; 108
 6fa:	11 f4       	brne	.+4      	; 0x700 <vfprintf+0x104>
 6fc:	10 68       	ori	r17, 0x80	; 128
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0x108>
 700:	88 36       	cpi	r24, 0x68	; 104
 702:	59 f4       	brne	.+22     	; 0x71a <vfprintf+0x11e>
 704:	ec 85       	ldd	r30, Y+12	; 0x0c
 706:	fd 85       	ldd	r31, Y+13	; 0x0d
 708:	93 fd       	sbrc	r25, 3
 70a:	85 91       	lpm	r24, Z+
 70c:	93 ff       	sbrs	r25, 3
 70e:	81 91       	ld	r24, Z+
 710:	fd 87       	std	Y+13, r31	; 0x0d
 712:	ec 87       	std	Y+12, r30	; 0x0c
 714:	88 23       	and	r24, r24
 716:	09 f0       	breq	.+2      	; 0x71a <vfprintf+0x11e>
 718:	b8 cf       	rjmp	.-144    	; 0x68a <vfprintf+0x8e>
 71a:	98 2f       	mov	r25, r24
 71c:	95 54       	subi	r25, 0x45	; 69
 71e:	93 30       	cpi	r25, 0x03	; 3
 720:	18 f0       	brcs	.+6      	; 0x728 <vfprintf+0x12c>
 722:	90 52       	subi	r25, 0x20	; 32
 724:	93 30       	cpi	r25, 0x03	; 3
 726:	38 f4       	brcc	.+14     	; 0x736 <vfprintf+0x13a>
 728:	24 e0       	ldi	r18, 0x04	; 4
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	a2 0e       	add	r10, r18
 72e:	b3 1e       	adc	r11, r19
 730:	3f e3       	ldi	r19, 0x3F	; 63
 732:	39 83       	std	Y+1, r19	; 0x01
 734:	0f c0       	rjmp	.+30     	; 0x754 <vfprintf+0x158>
 736:	83 36       	cpi	r24, 0x63	; 99
 738:	31 f0       	breq	.+12     	; 0x746 <vfprintf+0x14a>
 73a:	83 37       	cpi	r24, 0x73	; 115
 73c:	81 f0       	breq	.+32     	; 0x75e <vfprintf+0x162>
 73e:	83 35       	cpi	r24, 0x53	; 83
 740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0x148>
 742:	5a c0       	rjmp	.+180    	; 0x7f8 <vfprintf+0x1fc>
 744:	22 c0       	rjmp	.+68     	; 0x78a <vfprintf+0x18e>
 746:	f5 01       	movw	r30, r10
 748:	80 81       	ld	r24, Z
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	22 e0       	ldi	r18, 0x02	; 2
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	a2 0e       	add	r10, r18
 752:	b3 1e       	adc	r11, r19
 754:	21 e0       	ldi	r18, 0x01	; 1
 756:	c2 2e       	mov	r12, r18
 758:	d1 2c       	mov	r13, r1
 75a:	42 01       	movw	r8, r4
 75c:	14 c0       	rjmp	.+40     	; 0x786 <vfprintf+0x18a>
 75e:	92 e0       	ldi	r25, 0x02	; 2
 760:	29 2e       	mov	r2, r25
 762:	31 2c       	mov	r3, r1
 764:	2a 0c       	add	r2, r10
 766:	3b 1c       	adc	r3, r11
 768:	f5 01       	movw	r30, r10
 76a:	80 80       	ld	r8, Z
 76c:	91 80       	ldd	r9, Z+1	; 0x01
 76e:	16 ff       	sbrs	r17, 6
 770:	03 c0       	rjmp	.+6      	; 0x778 <vfprintf+0x17c>
 772:	6f 2d       	mov	r22, r15
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <vfprintf+0x180>
 778:	6f ef       	ldi	r22, 0xFF	; 255
 77a:	7f ef       	ldi	r23, 0xFF	; 255
 77c:	c4 01       	movw	r24, r8
 77e:	0e 94 10 05 	call	0xa20	; 0xa20 <strnlen>
 782:	6c 01       	movw	r12, r24
 784:	51 01       	movw	r10, r2
 786:	1f 77       	andi	r17, 0x7F	; 127
 788:	15 c0       	rjmp	.+42     	; 0x7b4 <vfprintf+0x1b8>
 78a:	82 e0       	ldi	r24, 0x02	; 2
 78c:	28 2e       	mov	r2, r24
 78e:	31 2c       	mov	r3, r1
 790:	2a 0c       	add	r2, r10
 792:	3b 1c       	adc	r3, r11
 794:	f5 01       	movw	r30, r10
 796:	80 80       	ld	r8, Z
 798:	91 80       	ldd	r9, Z+1	; 0x01
 79a:	16 ff       	sbrs	r17, 6
 79c:	03 c0       	rjmp	.+6      	; 0x7a4 <vfprintf+0x1a8>
 79e:	6f 2d       	mov	r22, r15
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <vfprintf+0x1ac>
 7a4:	6f ef       	ldi	r22, 0xFF	; 255
 7a6:	7f ef       	ldi	r23, 0xFF	; 255
 7a8:	c4 01       	movw	r24, r8
 7aa:	0e 94 05 05 	call	0xa0a	; 0xa0a <strnlen_P>
 7ae:	6c 01       	movw	r12, r24
 7b0:	10 68       	ori	r17, 0x80	; 128
 7b2:	51 01       	movw	r10, r2
 7b4:	13 fd       	sbrc	r17, 3
 7b6:	1c c0       	rjmp	.+56     	; 0x7f0 <vfprintf+0x1f4>
 7b8:	06 c0       	rjmp	.+12     	; 0x7c6 <vfprintf+0x1ca>
 7ba:	80 e2       	ldi	r24, 0x20	; 32
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	b3 01       	movw	r22, r6
 7c0:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 7c4:	ea 94       	dec	r14
 7c6:	8e 2d       	mov	r24, r14
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	c8 16       	cp	r12, r24
 7cc:	d9 06       	cpc	r13, r25
 7ce:	a8 f3       	brcs	.-22     	; 0x7ba <vfprintf+0x1be>
 7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <vfprintf+0x1f4>
 7d2:	f4 01       	movw	r30, r8
 7d4:	17 fd       	sbrc	r17, 7
 7d6:	85 91       	lpm	r24, Z+
 7d8:	17 ff       	sbrs	r17, 7
 7da:	81 91       	ld	r24, Z+
 7dc:	4f 01       	movw	r8, r30
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	b3 01       	movw	r22, r6
 7e2:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 7e6:	e1 10       	cpse	r14, r1
 7e8:	ea 94       	dec	r14
 7ea:	08 94       	sec
 7ec:	c1 08       	sbc	r12, r1
 7ee:	d1 08       	sbc	r13, r1
 7f0:	c1 14       	cp	r12, r1
 7f2:	d1 04       	cpc	r13, r1
 7f4:	71 f7       	brne	.-36     	; 0x7d2 <vfprintf+0x1d6>
 7f6:	e7 c0       	rjmp	.+462    	; 0x9c6 <vfprintf+0x3ca>
 7f8:	84 36       	cpi	r24, 0x64	; 100
 7fa:	11 f0       	breq	.+4      	; 0x800 <vfprintf+0x204>
 7fc:	89 36       	cpi	r24, 0x69	; 105
 7fe:	51 f5       	brne	.+84     	; 0x854 <vfprintf+0x258>
 800:	f5 01       	movw	r30, r10
 802:	17 ff       	sbrs	r17, 7
 804:	07 c0       	rjmp	.+14     	; 0x814 <vfprintf+0x218>
 806:	80 81       	ld	r24, Z
 808:	91 81       	ldd	r25, Z+1	; 0x01
 80a:	a2 81       	ldd	r26, Z+2	; 0x02
 80c:	b3 81       	ldd	r27, Z+3	; 0x03
 80e:	24 e0       	ldi	r18, 0x04	; 4
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	08 c0       	rjmp	.+16     	; 0x824 <vfprintf+0x228>
 814:	80 81       	ld	r24, Z
 816:	91 81       	ldd	r25, Z+1	; 0x01
 818:	aa 27       	eor	r26, r26
 81a:	97 fd       	sbrc	r25, 7
 81c:	a0 95       	com	r26
 81e:	ba 2f       	mov	r27, r26
 820:	22 e0       	ldi	r18, 0x02	; 2
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	a2 0e       	add	r10, r18
 826:	b3 1e       	adc	r11, r19
 828:	01 2f       	mov	r16, r17
 82a:	0f 76       	andi	r16, 0x6F	; 111
 82c:	b7 ff       	sbrs	r27, 7
 82e:	08 c0       	rjmp	.+16     	; 0x840 <vfprintf+0x244>
 830:	b0 95       	com	r27
 832:	a0 95       	com	r26
 834:	90 95       	com	r25
 836:	81 95       	neg	r24
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	af 4f       	sbci	r26, 0xFF	; 255
 83c:	bf 4f       	sbci	r27, 0xFF	; 255
 83e:	00 68       	ori	r16, 0x80	; 128
 840:	bc 01       	movw	r22, r24
 842:	cd 01       	movw	r24, r26
 844:	a2 01       	movw	r20, r4
 846:	2a e0       	ldi	r18, 0x0A	; 10
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	0e 94 47 05 	call	0xa8e	; 0xa8e <__ultoa_invert>
 84e:	d8 2e       	mov	r13, r24
 850:	d4 18       	sub	r13, r4
 852:	3f c0       	rjmp	.+126    	; 0x8d2 <vfprintf+0x2d6>
 854:	85 37       	cpi	r24, 0x75	; 117
 856:	21 f4       	brne	.+8      	; 0x860 <vfprintf+0x264>
 858:	1f 7e       	andi	r17, 0xEF	; 239
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	20 c0       	rjmp	.+64     	; 0x8a0 <vfprintf+0x2a4>
 860:	19 7f       	andi	r17, 0xF9	; 249
 862:	8f 36       	cpi	r24, 0x6F	; 111
 864:	a9 f0       	breq	.+42     	; 0x890 <vfprintf+0x294>
 866:	80 37       	cpi	r24, 0x70	; 112
 868:	20 f4       	brcc	.+8      	; 0x872 <vfprintf+0x276>
 86a:	88 35       	cpi	r24, 0x58	; 88
 86c:	09 f0       	breq	.+2      	; 0x870 <vfprintf+0x274>
 86e:	ae c0       	rjmp	.+348    	; 0x9cc <vfprintf+0x3d0>
 870:	0b c0       	rjmp	.+22     	; 0x888 <vfprintf+0x28c>
 872:	80 37       	cpi	r24, 0x70	; 112
 874:	21 f0       	breq	.+8      	; 0x87e <vfprintf+0x282>
 876:	88 37       	cpi	r24, 0x78	; 120
 878:	09 f0       	breq	.+2      	; 0x87c <vfprintf+0x280>
 87a:	a8 c0       	rjmp	.+336    	; 0x9cc <vfprintf+0x3d0>
 87c:	01 c0       	rjmp	.+2      	; 0x880 <vfprintf+0x284>
 87e:	10 61       	ori	r17, 0x10	; 16
 880:	14 ff       	sbrs	r17, 4
 882:	09 c0       	rjmp	.+18     	; 0x896 <vfprintf+0x29a>
 884:	14 60       	ori	r17, 0x04	; 4
 886:	07 c0       	rjmp	.+14     	; 0x896 <vfprintf+0x29a>
 888:	14 ff       	sbrs	r17, 4
 88a:	08 c0       	rjmp	.+16     	; 0x89c <vfprintf+0x2a0>
 88c:	16 60       	ori	r17, 0x06	; 6
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0x2a0>
 890:	28 e0       	ldi	r18, 0x08	; 8
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <vfprintf+0x2a4>
 896:	20 e1       	ldi	r18, 0x10	; 16
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <vfprintf+0x2a4>
 89c:	20 e1       	ldi	r18, 0x10	; 16
 89e:	32 e0       	ldi	r19, 0x02	; 2
 8a0:	f5 01       	movw	r30, r10
 8a2:	17 ff       	sbrs	r17, 7
 8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <vfprintf+0x2b8>
 8a6:	60 81       	ld	r22, Z
 8a8:	71 81       	ldd	r23, Z+1	; 0x01
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	44 e0       	ldi	r20, 0x04	; 4
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <vfprintf+0x2c4>
 8b4:	60 81       	ld	r22, Z
 8b6:	71 81       	ldd	r23, Z+1	; 0x01
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	42 e0       	ldi	r20, 0x02	; 2
 8be:	50 e0       	ldi	r21, 0x00	; 0
 8c0:	a4 0e       	add	r10, r20
 8c2:	b5 1e       	adc	r11, r21
 8c4:	a2 01       	movw	r20, r4
 8c6:	0e 94 47 05 	call	0xa8e	; 0xa8e <__ultoa_invert>
 8ca:	d8 2e       	mov	r13, r24
 8cc:	d4 18       	sub	r13, r4
 8ce:	01 2f       	mov	r16, r17
 8d0:	0f 77       	andi	r16, 0x7F	; 127
 8d2:	06 ff       	sbrs	r16, 6
 8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <vfprintf+0x2ec>
 8d6:	0e 7f       	andi	r16, 0xFE	; 254
 8d8:	df 14       	cp	r13, r15
 8da:	30 f4       	brcc	.+12     	; 0x8e8 <vfprintf+0x2ec>
 8dc:	04 ff       	sbrs	r16, 4
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <vfprintf+0x2f0>
 8e0:	02 fd       	sbrc	r16, 2
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <vfprintf+0x2f0>
 8e4:	0f 7e       	andi	r16, 0xEF	; 239
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x2f0>
 8e8:	1d 2d       	mov	r17, r13
 8ea:	01 c0       	rjmp	.+2      	; 0x8ee <vfprintf+0x2f2>
 8ec:	1f 2d       	mov	r17, r15
 8ee:	80 2f       	mov	r24, r16
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	04 ff       	sbrs	r16, 4
 8f4:	0c c0       	rjmp	.+24     	; 0x90e <vfprintf+0x312>
 8f6:	fe 01       	movw	r30, r28
 8f8:	ed 0d       	add	r30, r13
 8fa:	f1 1d       	adc	r31, r1
 8fc:	20 81       	ld	r18, Z
 8fe:	20 33       	cpi	r18, 0x30	; 48
 900:	11 f4       	brne	.+4      	; 0x906 <vfprintf+0x30a>
 902:	09 7e       	andi	r16, 0xE9	; 233
 904:	09 c0       	rjmp	.+18     	; 0x918 <vfprintf+0x31c>
 906:	02 ff       	sbrs	r16, 2
 908:	06 c0       	rjmp	.+12     	; 0x916 <vfprintf+0x31a>
 90a:	1e 5f       	subi	r17, 0xFE	; 254
 90c:	05 c0       	rjmp	.+10     	; 0x918 <vfprintf+0x31c>
 90e:	86 78       	andi	r24, 0x86	; 134
 910:	90 70       	andi	r25, 0x00	; 0
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	09 f0       	breq	.+2      	; 0x918 <vfprintf+0x31c>
 916:	1f 5f       	subi	r17, 0xFF	; 255
 918:	80 2e       	mov	r8, r16
 91a:	99 24       	eor	r9, r9
 91c:	03 fd       	sbrc	r16, 3
 91e:	12 c0       	rjmp	.+36     	; 0x944 <vfprintf+0x348>
 920:	00 ff       	sbrs	r16, 0
 922:	0d c0       	rjmp	.+26     	; 0x93e <vfprintf+0x342>
 924:	fd 2c       	mov	r15, r13
 926:	1e 15       	cp	r17, r14
 928:	50 f4       	brcc	.+20     	; 0x93e <vfprintf+0x342>
 92a:	fe 0c       	add	r15, r14
 92c:	f1 1a       	sub	r15, r17
 92e:	1e 2d       	mov	r17, r14
 930:	06 c0       	rjmp	.+12     	; 0x93e <vfprintf+0x342>
 932:	80 e2       	ldi	r24, 0x20	; 32
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	b3 01       	movw	r22, r6
 938:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 93c:	1f 5f       	subi	r17, 0xFF	; 255
 93e:	1e 15       	cp	r17, r14
 940:	c0 f3       	brcs	.-16     	; 0x932 <vfprintf+0x336>
 942:	04 c0       	rjmp	.+8      	; 0x94c <vfprintf+0x350>
 944:	1e 15       	cp	r17, r14
 946:	10 f4       	brcc	.+4      	; 0x94c <vfprintf+0x350>
 948:	e1 1a       	sub	r14, r17
 94a:	01 c0       	rjmp	.+2      	; 0x94e <vfprintf+0x352>
 94c:	ee 24       	eor	r14, r14
 94e:	84 fe       	sbrs	r8, 4
 950:	0f c0       	rjmp	.+30     	; 0x970 <vfprintf+0x374>
 952:	80 e3       	ldi	r24, 0x30	; 48
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	b3 01       	movw	r22, r6
 958:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 95c:	82 fe       	sbrs	r8, 2
 95e:	1f c0       	rjmp	.+62     	; 0x99e <vfprintf+0x3a2>
 960:	81 fe       	sbrs	r8, 1
 962:	03 c0       	rjmp	.+6      	; 0x96a <vfprintf+0x36e>
 964:	88 e5       	ldi	r24, 0x58	; 88
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	10 c0       	rjmp	.+32     	; 0x98a <vfprintf+0x38e>
 96a:	88 e7       	ldi	r24, 0x78	; 120
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0d c0       	rjmp	.+26     	; 0x98a <vfprintf+0x38e>
 970:	c4 01       	movw	r24, r8
 972:	86 78       	andi	r24, 0x86	; 134
 974:	90 70       	andi	r25, 0x00	; 0
 976:	00 97       	sbiw	r24, 0x00	; 0
 978:	91 f0       	breq	.+36     	; 0x99e <vfprintf+0x3a2>
 97a:	81 fc       	sbrc	r8, 1
 97c:	02 c0       	rjmp	.+4      	; 0x982 <vfprintf+0x386>
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	01 c0       	rjmp	.+2      	; 0x984 <vfprintf+0x388>
 982:	8b e2       	ldi	r24, 0x2B	; 43
 984:	07 fd       	sbrc	r16, 7
 986:	8d e2       	ldi	r24, 0x2D	; 45
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	b3 01       	movw	r22, r6
 98c:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 990:	06 c0       	rjmp	.+12     	; 0x99e <vfprintf+0x3a2>
 992:	80 e3       	ldi	r24, 0x30	; 48
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	b3 01       	movw	r22, r6
 998:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 99c:	fa 94       	dec	r15
 99e:	df 14       	cp	r13, r15
 9a0:	c0 f3       	brcs	.-16     	; 0x992 <vfprintf+0x396>
 9a2:	da 94       	dec	r13
 9a4:	f2 01       	movw	r30, r4
 9a6:	ed 0d       	add	r30, r13
 9a8:	f1 1d       	adc	r31, r1
 9aa:	80 81       	ld	r24, Z
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	b3 01       	movw	r22, r6
 9b0:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 9b4:	dd 20       	and	r13, r13
 9b6:	a9 f7       	brne	.-22     	; 0x9a2 <vfprintf+0x3a6>
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0x3ca>
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	b3 01       	movw	r22, r6
 9c0:	0e 94 1b 05 	call	0xa36	; 0xa36 <fputc>
 9c4:	ea 94       	dec	r14
 9c6:	ee 20       	and	r14, r14
 9c8:	c1 f7       	brne	.-16     	; 0x9ba <vfprintf+0x3be>
 9ca:	40 ce       	rjmp	.-896    	; 0x64c <vfprintf+0x50>
 9cc:	f3 01       	movw	r30, r6
 9ce:	86 81       	ldd	r24, Z+6	; 0x06
 9d0:	97 81       	ldd	r25, Z+7	; 0x07
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0x3dc>
 9d4:	8f ef       	ldi	r24, 0xFF	; 255
 9d6:	9f ef       	ldi	r25, 0xFF	; 255
 9d8:	2d 96       	adiw	r28, 0x0d	; 13
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	1f 91       	pop	r17
 9ea:	0f 91       	pop	r16
 9ec:	ff 90       	pop	r15
 9ee:	ef 90       	pop	r14
 9f0:	df 90       	pop	r13
 9f2:	cf 90       	pop	r12
 9f4:	bf 90       	pop	r11
 9f6:	af 90       	pop	r10
 9f8:	9f 90       	pop	r9
 9fa:	8f 90       	pop	r8
 9fc:	7f 90       	pop	r7
 9fe:	6f 90       	pop	r6
 a00:	5f 90       	pop	r5
 a02:	4f 90       	pop	r4
 a04:	3f 90       	pop	r3
 a06:	2f 90       	pop	r2
 a08:	08 95       	ret

00000a0a <strnlen_P>:
 a0a:	fc 01       	movw	r30, r24
 a0c:	05 90       	lpm	r0, Z+
 a0e:	61 50       	subi	r22, 0x01	; 1
 a10:	70 40       	sbci	r23, 0x00	; 0
 a12:	01 10       	cpse	r0, r1
 a14:	d8 f7       	brcc	.-10     	; 0xa0c <strnlen_P+0x2>
 a16:	80 95       	com	r24
 a18:	90 95       	com	r25
 a1a:	8e 0f       	add	r24, r30
 a1c:	9f 1f       	adc	r25, r31
 a1e:	08 95       	ret

00000a20 <strnlen>:
 a20:	fc 01       	movw	r30, r24
 a22:	61 50       	subi	r22, 0x01	; 1
 a24:	70 40       	sbci	r23, 0x00	; 0
 a26:	01 90       	ld	r0, Z+
 a28:	01 10       	cpse	r0, r1
 a2a:	d8 f7       	brcc	.-10     	; 0xa22 <strnlen+0x2>
 a2c:	80 95       	com	r24
 a2e:	90 95       	com	r25
 a30:	8e 0f       	add	r24, r30
 a32:	9f 1f       	adc	r25, r31
 a34:	08 95       	ret

00000a36 <fputc>:
 a36:	0f 93       	push	r16
 a38:	1f 93       	push	r17
 a3a:	cf 93       	push	r28
 a3c:	df 93       	push	r29
 a3e:	8c 01       	movw	r16, r24
 a40:	eb 01       	movw	r28, r22
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	81 ff       	sbrs	r24, 1
 a46:	1b c0       	rjmp	.+54     	; 0xa7e <fputc+0x48>
 a48:	82 ff       	sbrs	r24, 2
 a4a:	0d c0       	rjmp	.+26     	; 0xa66 <fputc+0x30>
 a4c:	2e 81       	ldd	r18, Y+6	; 0x06
 a4e:	3f 81       	ldd	r19, Y+7	; 0x07
 a50:	8c 81       	ldd	r24, Y+4	; 0x04
 a52:	9d 81       	ldd	r25, Y+5	; 0x05
 a54:	28 17       	cp	r18, r24
 a56:	39 07       	cpc	r19, r25
 a58:	64 f4       	brge	.+24     	; 0xa72 <fputc+0x3c>
 a5a:	e8 81       	ld	r30, Y
 a5c:	f9 81       	ldd	r31, Y+1	; 0x01
 a5e:	01 93       	st	Z+, r16
 a60:	f9 83       	std	Y+1, r31	; 0x01
 a62:	e8 83       	st	Y, r30
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <fputc+0x3c>
 a66:	e8 85       	ldd	r30, Y+8	; 0x08
 a68:	f9 85       	ldd	r31, Y+9	; 0x09
 a6a:	80 2f       	mov	r24, r16
 a6c:	19 95       	eicall
 a6e:	00 97       	sbiw	r24, 0x00	; 0
 a70:	31 f4       	brne	.+12     	; 0xa7e <fputc+0x48>
 a72:	8e 81       	ldd	r24, Y+6	; 0x06
 a74:	9f 81       	ldd	r25, Y+7	; 0x07
 a76:	01 96       	adiw	r24, 0x01	; 1
 a78:	9f 83       	std	Y+7, r25	; 0x07
 a7a:	8e 83       	std	Y+6, r24	; 0x06
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <fputc+0x4c>
 a7e:	0f ef       	ldi	r16, 0xFF	; 255
 a80:	1f ef       	ldi	r17, 0xFF	; 255
 a82:	c8 01       	movw	r24, r16
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	08 95       	ret

00000a8e <__ultoa_invert>:
 a8e:	fa 01       	movw	r30, r20
 a90:	aa 27       	eor	r26, r26
 a92:	28 30       	cpi	r18, 0x08	; 8
 a94:	51 f1       	breq	.+84     	; 0xaea <__ultoa_invert+0x5c>
 a96:	20 31       	cpi	r18, 0x10	; 16
 a98:	81 f1       	breq	.+96     	; 0xafa <__ultoa_invert+0x6c>
 a9a:	e8 94       	clt
 a9c:	6f 93       	push	r22
 a9e:	6e 7f       	andi	r22, 0xFE	; 254
 aa0:	6e 5f       	subi	r22, 0xFE	; 254
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	af 4f       	sbci	r26, 0xFF	; 255
 aaa:	b1 e0       	ldi	r27, 0x01	; 1
 aac:	3e d0       	rcall	.+124    	; 0xb2a <__ultoa_invert+0x9c>
 aae:	b4 e0       	ldi	r27, 0x04	; 4
 ab0:	3c d0       	rcall	.+120    	; 0xb2a <__ultoa_invert+0x9c>
 ab2:	67 0f       	add	r22, r23
 ab4:	78 1f       	adc	r23, r24
 ab6:	89 1f       	adc	r24, r25
 ab8:	9a 1f       	adc	r25, r26
 aba:	a1 1d       	adc	r26, r1
 abc:	68 0f       	add	r22, r24
 abe:	79 1f       	adc	r23, r25
 ac0:	8a 1f       	adc	r24, r26
 ac2:	91 1d       	adc	r25, r1
 ac4:	a1 1d       	adc	r26, r1
 ac6:	6a 0f       	add	r22, r26
 ac8:	71 1d       	adc	r23, r1
 aca:	81 1d       	adc	r24, r1
 acc:	91 1d       	adc	r25, r1
 ace:	a1 1d       	adc	r26, r1
 ad0:	20 d0       	rcall	.+64     	; 0xb12 <__ultoa_invert+0x84>
 ad2:	09 f4       	brne	.+2      	; 0xad6 <__ultoa_invert+0x48>
 ad4:	68 94       	set
 ad6:	3f 91       	pop	r19
 ad8:	2a e0       	ldi	r18, 0x0A	; 10
 ada:	26 9f       	mul	r18, r22
 adc:	11 24       	eor	r1, r1
 ade:	30 19       	sub	r19, r0
 ae0:	30 5d       	subi	r19, 0xD0	; 208
 ae2:	31 93       	st	Z+, r19
 ae4:	de f6       	brtc	.-74     	; 0xa9c <__ultoa_invert+0xe>
 ae6:	cf 01       	movw	r24, r30
 ae8:	08 95       	ret
 aea:	46 2f       	mov	r20, r22
 aec:	47 70       	andi	r20, 0x07	; 7
 aee:	40 5d       	subi	r20, 0xD0	; 208
 af0:	41 93       	st	Z+, r20
 af2:	b3 e0       	ldi	r27, 0x03	; 3
 af4:	0f d0       	rcall	.+30     	; 0xb14 <__ultoa_invert+0x86>
 af6:	c9 f7       	brne	.-14     	; 0xaea <__ultoa_invert+0x5c>
 af8:	f6 cf       	rjmp	.-20     	; 0xae6 <__ultoa_invert+0x58>
 afa:	46 2f       	mov	r20, r22
 afc:	4f 70       	andi	r20, 0x0F	; 15
 afe:	40 5d       	subi	r20, 0xD0	; 208
 b00:	4a 33       	cpi	r20, 0x3A	; 58
 b02:	18 f0       	brcs	.+6      	; 0xb0a <__ultoa_invert+0x7c>
 b04:	49 5d       	subi	r20, 0xD9	; 217
 b06:	31 fd       	sbrc	r19, 1
 b08:	40 52       	subi	r20, 0x20	; 32
 b0a:	41 93       	st	Z+, r20
 b0c:	02 d0       	rcall	.+4      	; 0xb12 <__ultoa_invert+0x84>
 b0e:	a9 f7       	brne	.-22     	; 0xafa <__ultoa_invert+0x6c>
 b10:	ea cf       	rjmp	.-44     	; 0xae6 <__ultoa_invert+0x58>
 b12:	b4 e0       	ldi	r27, 0x04	; 4
 b14:	a6 95       	lsr	r26
 b16:	97 95       	ror	r25
 b18:	87 95       	ror	r24
 b1a:	77 95       	ror	r23
 b1c:	67 95       	ror	r22
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0x86>
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	61 05       	cpc	r22, r1
 b26:	71 05       	cpc	r23, r1
 b28:	08 95       	ret
 b2a:	9b 01       	movw	r18, r22
 b2c:	ac 01       	movw	r20, r24
 b2e:	0a 2e       	mov	r0, r26
 b30:	06 94       	lsr	r0
 b32:	57 95       	ror	r21
 b34:	47 95       	ror	r20
 b36:	37 95       	ror	r19
 b38:	27 95       	ror	r18
 b3a:	ba 95       	dec	r27
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__ultoa_invert+0xa2>
 b3e:	62 0f       	add	r22, r18
 b40:	73 1f       	adc	r23, r19
 b42:	84 1f       	adc	r24, r20
 b44:	95 1f       	adc	r25, r21
 b46:	a0 1d       	adc	r26, r0
 b48:	08 95       	ret

00000b4a <_exit>:
 b4a:	f8 94       	cli

00000b4c <__stop_program>:
 b4c:	ff cf       	rjmp	.-2      	; 0xb4c <__stop_program>
